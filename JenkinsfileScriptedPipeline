#!/usr/bin/env groovy

// Define variables
List Action_list = ["\"Release\"","\"RollBack\""]
List Environment_list = ["\"Select:selected\"","\"PROD\"","\"DR\""]
List DR_cluster_list = ["\"dc1\"","\"dc2\"","\"dc3\""]
List PROD_cluster_list = ["\"clstr-1\"","\"clstr-2\""]
List default_item = ["\"Not Applicable\""]
String Action = buildScript(Action_list)
String Environment = buildScript(Environment_list)
String ProdClusterList = buildScript(PROD_cluster_list)
String DRClusterList = buildScript(DR_cluster_list)
String items = populateItems(default_item,PROD_cluster_list,DR_cluster_list)
// Methods to build groovy scripts to populate data
String buildScript(List values){
  return "return $values"
}
String populateItems(List default_item, List ProdClusterList, List DRClusterList){
return """if(Environment.equals('PROD')){
	 return $ProdClusterList
	}
	else if(Environment.equals('DR')){
	 return $DRClusterList
	}
	else{
	 return $default_item
	}
	"""
}

List ContentAction_list = ["\"No\"","\"Yes\""]
String ContentAction = buildScript(ContentAction_list)

def ProdCluster = [
	"clstr-1" : "4e5ec2de-f7c1-40ce-81e0-64462dc04fd8",
	"clstr-2" : "Test Cluster"
	]
//Map Prod = [
//    clstr-1: ['4e5ec2de-f7c1-40ce-81e0-64462dc04fd8']
//]

	// Properties step to set the Active choice parameters via 
	// Declarative Scripting
	properties([
		parameters([
			[$class: 'StringParameterDefinition', defaultValue: 'None', description: 'The CR Number', name: 'CR_NUMBER'],
			[$class: 'ChoiceParameter', choiceType: 'PT_SINGLE_SELECT',   name: 'Action', description: 'Action,Select Release/RollBack', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, script: 'return ["ERROR"]'], script: [classpath: [], sandbox: false, script:  Action]]],
			[$class: 'ChoiceParameter', choiceType: 'PT_SINGLE_SELECT',   name: 'Environment', description: 'Deployment Environment,Select Prod/DR', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, script: 'return ["ERROR"]'], script: [classpath: [], sandbox: false, script:  Environment]]],
			[$class: 'CascadeChoiceParameter', choiceType: 'PT_CHECKBOX', name: 'Cluster', description: 'Deployment Cluster', referencedParameters: 'Environment', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, script: 'return ["error"]'], script: [classpath: [], sandbox: false, script: items]]],
			[$class: 'ChoiceParameter', choiceType: 'PT_SINGLE_SELECT',   name: 'DeployContent', description: 'Want deploy with Content changes or Without', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, script: 'return ["ERROR"]'], script: [classpath: [], sandbox: false, script:  ContentAction]]]
		])
	])
	
node {
	

	stage('Check CRNumber') {
					if (params.CR_NUMBER.size() < 6) {
						echo "Invalid change request number : ${params.CR_NUMBER}"
						currentBuild.result = 'ABORTED'
						error('Release Aborted.')
					}

	}
	
	/*stage('Assign Values to map') {
		script {
					sh "rm -f ${WORKSPACE}/env.groovy"
                    sh "echo \"ProdCluster = [ clstr-1 : '4e5ec2de-f7c1-40ce-81e0-64462dc04fd8' ]\" > env.groovy"
                    sh "echo \"DRCluster = [ DC1 : 'Dc1' , DC2 : 'dc2' , DC3 : 'dc3' ]\" >> env.groovy"
                }
	}*/
	stage('Activities') {
		/*script{
			println "loading env groovy"
			sh "cat ${WORKSPACE}/env.groovy"
			load "${WORKSPACE}/env.groovy"
			println "env groovy loaded"
			}*/
		switch(params.Action) {
			
			case "Release":
					switch(params.Environment){
						case "PROD":
							//println "mapping"
							//map = ProdCluster
							//println "mapping done"
							String[] clusters= params.Cluster.split(',')
								for (int i = 0; i < clusters.size(); i++)
								{
									stage("Disable traffic in Prod cluster: " + "${clusters[i]}")
									{
										//println map.clstr-1
										for(element in ProdCluster) {
											if (clusters[i] == element.key ) {
												echo "${element.key} ${element.value}"
											}
											else echo "didn't selected ${element.key} cluster"
											//echo "${element.key} ${element.value}"
											//println $KEY
										}
									}
									stage("Deploy in cluster in prod cluster: " + "${clusters[i]}")
									{
									}
									stage("Content Deploy in prod cluster: " + "${clusters[i]}")
									{
									}
									stage("Enable Traffic in Prod cluster: " + "${clusters[i]}")
									{
									}
								}
						break;
						case "DR":

							 
							map = DRCluster

						String[] clusters= params.Cluster.split(',')
							for (int i = 0; i < clusters.size(); i++)
							{
								stage('Disable traffic in DR ${params.Action}')
								{
									println map.DC1
								}
								stage('Deploy in cluster in DR')
								{
								}
								stage('Content Deploy in DR')
								{
								}
								stage('Enable Traffic in DR')
								{
								}
							}
						break;
					default:
						echo "Didn't selected any NetWorkClusterEnvironment..."
						break;
				}
			break;
			
			case "Revert":
					switch(params.Environment){
						case "PROD":
							String[] clusters= params.Cluster.split(',')
								for (int i = 0; i < clusters.size(); i++)
								{
									stage('Disable traffic in Prod on ${params.Environment}')
									{
									}
									stage('Deploy in cluster in Prod ${params.Environment}')
									{
									}
									stage('Content Deploy in Prod ${params.Environment}')
									{
									}
									stage('Enable Traffic in Prod ${params.Environment}')
									{
									}
								}
						break;
						case "DR":
							String[] clusters= params.Cluster.split(',')
								for (int i = 0; i < clusters.size(); i++)
								{
									stage('Disable traffic in DR ${params.Environment}')
									{
									}
									stage('Deploy in cluster in DR ${params.Environment}')
									{
									}
									stage('Content Deploy in DR ${params.Environment}')
									{
									}
									stage('Enable Traffic in DR${params.Environment}')
									{
									}
								}
						break;
						default:
						echo "Didn't selected any NetWorkClusterEnvironment..."
						break;
				}
			break;
			default:
				echo "Invalid environment ERROR..."
				break;			
					
		}
	}
}
