#!/usr/bin/env groovy
pipeline {
	//def server = Artifactory.server('eCom-Artifactory')
	//def rtMaven = Artifactory.newMavenBuild()
	//def buildInfo = Artifactory.newBuildInfo()
	//env.JAVA_HOME="${tool 'JDK1.8.0_111'}"
	//env.PATH="${env.JAVA_HOME}/bin:${env.PATH}"	
	agent any
	environment {
	 userInput = ""
	 didTimeout = false
	}
	
	stages{
	stage('Choose Environment(s) to Deploy') {
	steps{
	   script{
		/*if ("$CR_NUMBER"?.trim() && "$CR_NUMBER".size() < 6) {
			echo "Invalid change request number : $CR_NUMBER"
			currentBuild.result = 'ABORTED'
			error('Release Aborted.')
		}*/
		try {
			timeout(time: 120, unit: 'SECONDS') {
				userInput = input(id: 'chooseOptions',
				message: 'Select environment(s) to deploy',
				parameters: [
					choice(name: 'ENVIRONMENT', choices: ['PROD','DR'].join('\n'), description: '')
				])
			}
		} catch(err) {
			def user = err.getCauses()[0].getUser()
			if('SYSTEM' == user.toString()) {
				didTimeout = true
			} else {
				echo "Aborted by: [${user}]"
			}
		}
	}
	}
	}
	stage ('condition check'){
	steps{
	script{
	if (didTimeout) {
		// do something on timeout
		echo "Work flow stopped as no input was received within timeout"
	} else if (userInput.size() > 0) {
		echo "Selected Environment is: $userInput"
		try {
			stage ('Checkout') {
				checkout scm
				checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'GithubLogin', url: 'https://github.com/krishna52santosh/maven-selenium-webdriver-testng-example-project.git']]])
			}

			/*stage ('Configure Build Environment') {
				rtMaven.tool = 'apache-maven-3.3.9' // Tool name from Jenkins configuration
				rtMaven.deployer releaseRepo: 'ecom-release-local', snapshotRepo: 'ecom-snapshot-local', server: server
				rtMaven.resolver releaseRepo: 'ecom-vrepo',snapshotRepo: 'ecom-vrepo', server: server
                
				buildInfo.env.capture = true
				buildInfo.env.filter.addInclude("*")
				buildInfo.env.filter.addExclude("DONT_COLLECT*")					
			}*/

			stage ('Build Source Code') {
				bat 'java -version'
				bat 'clean compile -DskipTests=true -U'
			}

			stage ("Disable Traffic at $userInput") {
				switch("$userInput") {
					  case "PROD":
							echo "Executing at $userInput ...."
							/*step([$class: "RundeckNotifier",
								  includeRundeckLogs: true,
								  jobId: "d13aaac3-3345-406f-bb65-082e681de5c2",
								  nodeFilters: "",
								  options: """
									   operations=disableTraffic.sh
									""",
								  rundeckInstance: "PROD-RUNDECK",
								  shouldFailTheBuild: true,
								  shouldWaitForRundeckJob: true,
								  tags: "",
								  tailLog: true]) */
						break
					  case "DR":
							echo "Executing at $userInput ...."
							/*step([$class: "RundeckNotifier",
								  includeRundeckLogs: true,
								  jobId: "ead91293-b0a6-4861-be38-4ac0b1e14de5",
								  nodeFilters: "",
								  options: """
									   operations=disableTraffic.sh
									""",
								  rundeckInstance: "DR-RUNDECK",
								  shouldFailTheBuild: true,
								  shouldWaitForRundeckJob: true,
								  tags: "",
								  tailLog: true]) */
						break
					  default:
						echo "Invalid environment ERROR..."
						break
				}
			 }					
		
			stage("Deploying into $userInput") {
				echo "Start Deploying into $userInput Environment"
				//sh "/softwares/jenkins/scripts/aem-crx-deploy.sh $userInput ${env.WORKSPACE} ${CRX_PACKAGE_NAME} ${env.AEM_PROD_TOKENS}"
				echo "$userInput deployment was successful."
			}

			stage ('Publish build Artifacts') {
			    //buildInfo.name = "Released-$CR_NUMBER"
				//server.publishBuildInfo buildInfo
				
				// Promote build
				/*
				def promotionConfig = [
					// Mandatory parameters
					'buildName'          : buildInfo.name,
					'buildNumber'        : buildInfo.number,
					'targetRepo'         : 'libs-release-local',
					'CRNumber'           : ${CR_NUMBER}
				 
					// Optional parameters
					'comment'            : "Production release change request no:${CR_NUMBER}",
					'status'             : 'Released'
				]
				server.promote promotionConfig			
				*/
			}
			
		} catch(err) {
			def cause = err.getCauses()[0]
			currentBuild.result = 'FAILURE'
			echo "Build Failed due to $cause"
		}		
	}  else {
		// do something else
		echo "No environment selected, deployment was not successful."
		currentBuild.result = 'FAILURE'
	}


/*
	stage('Send email') {
		emailext attachLog: false,
		body: '${SCRIPT, template="groovy-html.template"}',
		compressLog: true, mimeType: 'text/html',
		recipientProviders: [culprits(), brokenBuildSuspects()],
		replyTo: '$DEFAULT_REPLYTO',
		subject: '$DEFAULT_SUBJECT',
		to:'sureshbabu'
		
		to: 'vshanmugavelu,smandadapu,ravindrard@virtusa.com,graja@virtusa.com,kgpraveen@virtusa.com,prathyushavp@virtusa.com,sarithad@virtusa.com,rmanoharan,shravankumar.b@sonata-software.com,gdinakar@virtusa.com,nareshbabuv@virtusa.com,ranjithgaddam@virtusa.com,sanghamittrap@virtusa.com,Shreyab@virtusa.com,rmoodapally,mohammedaahmed,rdevireddy,radhikan@virtusa.com,msambaraju,cc:AKapoor,cc:rwarrier,cc:sureshbabu'
	
	}*/	
}
}
}
}
}
