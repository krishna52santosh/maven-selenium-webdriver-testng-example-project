#!/usr/bin/env groovy

	// Define variables
	List Environment_list = ["\"Select:selected\"","\"PROD\"","\"DR\""]
	List DR_cluster_list = ["\"Select:selected\"","\"dc1\"","\"dc2\"","\"dc3\""]
	List PROD_cluster_list = ["\"Select:selected\"","\"pc1\"","\"pc2\"","\"pc3\"","\"pc4\""]
	List default_item = ["\"Not Applicable\""]
	String Environment = buildScript(Environment_list)
	String ProdClusterList = buildScript(PROD_cluster_list)
	String DRClusterList = buildScript(DR_cluster_list)
	String items = populateItems(default_item,PROD_cluster_list,DR_cluster_list)
	// Methods to build groovy scripts to populate data
	String buildScript(List values){
	  return "return $values"
	}
	String populateItems(List default_item, List ProdClusterList, List DRClusterList){
	return """if(Environment.equals('PROD')){
		 return $ProdClusterList
		 }
		 else if(Environment.equals('DR')){
		 return $DRClusterList
		 }else{
		 return $default_item
		 }
		 """
	}
	// Properties step to set the Active choice parameters via 
	// Declarative Scripting
	properties([
		parameters([
			[$class: 'ChoiceParameter', choiceType: 'PT_SINGLE_SELECT',   name: 'Environment', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, script: 'return ["ERROR"]'], script: [classpath: [], sandbox: false,
			script:  Environment]]],
	[$class: 'CascadeChoiceParameter', choiceType: 'PT_CHECKBOX', name: 'Cluster', referencedParameters: 'Environment', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, script: 'return ["error"]'], script: [classpath: [], sandbox: false, script: items]]]
		])
	])

	pipeline {
			
		agent any
		
		 parameters {
			string(name: "CR_NUMBER", description: 'The CR Number')
			choice(name: "Action", choices: ["Release", "RollBack"])
		}
		environment {
		//def server = Artifactory.server('eCom-Artifactory')
		//def rtMaven = Artifactory.newMavenBuild()
		//def buildInfo = Artifactory.newBuildInfo()
		//env.JAVA_HOME="${tool 'JDK1.8.0_111'}"
		//env.PATH="${env.JAVA_HOME}/bin:${env.PATH}"
		 userInput = ""
		 didTimeout = false
		}
		
		stages{
		stage('Check CRNumber') {
		steps{
		   script{
			if (params.CR_NUMBER.size() < 6) {
				echo "Invalid change request number : ${params.CR_NUMBER}"
				currentBuild.result = 'ABORTED'
				error('Release Aborted.')
			}
			
			
		}
		}
		}

			

				/*stage ('Configure Build Environment') {
					rtMaven.tool = 'apache-maven-3.3.9' // Tool name from Jenkins configuration
					rtMaven.deployer releaseRepo: 'ecom-release-local', snapshotRepo: 'ecom-snapshot-local', server: server
					rtMaven.resolver releaseRepo: 'ecom-vrepo',snapshotRepo: 'ecom-vrepo', server: server
					
					buildInfo.env.capture = true
					buildInfo.env.filter.addInclude("*")
					buildInfo.env.filter.addExclude("DONT_COLLECT*")					
				}*/

				stage ('Build Source Code') {
					steps{
					bat 'java -version'
					//bat 'mvn clean compile -DskipTests=true -U'
					}
				}

				stage ('Disable Traffic on Environment') {
				steps{
				script{
					switch(params.Environment) {
						  case "PROD":
								echo "Executing at ${params.Environment} ...."
								echo "Executing at ${params.Cluster} cluster ...."
								//String cname= echo 
								String[] str = params.Cluster.split(',')
								
								
								for (int i = 0; i < str.size(); ++i) {
									echo "Testing the ${str[i]} cluster"
								}
								
								/*step([$class: "RundeckNotifier",
									  includeRundeckLogs: true,
									  jobId: "d13aaac3-3345-406f-bb65-082e681de5c2",
									  nodeFilters: "",
									  options: """
										   operations=disableTraffic.sh
										""",
									  rundeckInstance: "PROD-RUNDECK",
									  shouldFailTheBuild: true,
									  shouldWaitForRundeckJob: true,
									  tags: "",
									  tailLog: true]) */
							break
						  case "DR":
								echo "Executing at ${params.Environment} ...."
								echo "Executing at ${params.Cluster} cluster ...."
									for(item in params.Cluster){
										echo "for loop for DR"
										println item
									}
								/*step([$class: "RundeckNotifier",
									  includeRundeckLogs: true,
									  jobId: "ead91293-b0a6-4861-be38-4ac0b1e14de5",
									  nodeFilters: "",
									  options: """
										   operations=disableTraffic.sh
										""",
									  rundeckInstance: "DR-RUNDECK",
									  shouldFailTheBuild: true,
									  shouldWaitForRundeckJob: true,
									  tags: "",
									  tailLog: true]) */
							break
						  default:
							echo "Invalid environment ERROR..."
							break
					}
				  }
				  }
				 }					
			
				stage('Deploying into Environment') {
				steps{
					script{
					
					switch(params.Action) {
						  case "Release":
								echo "Releasing changes into ${params.Environment}"
								if (params.Environment == "PROD"){
								echo "Start Deploying into Environment ${params.Environment}" 
								echo "${params.Cluster} cluster deployment was successfull ...."
								}
								else if (params.Environment == "DR"){
								echo "Start Deploying into Environment ${params.Environment}" 
								echo "${params.Cluster} cluster deployment was successfull ...."
								}
								else echo "Wrong Environment"
								
							break
						  case "RollBack":
								echo "Rolling back changes from ${params.Environment} "
								if (params.Environment == "PROD"){
								echo "Start Deploying into Environment ${params.Environment}" 
								echo "${params.Cluster} cluster deployment was successfull ...."
								}
								else if (params.Environment == "DR"){
								echo "Start Deploying into Environment ${params.Environment}" 
								echo "${params.Cluster} cluster deployment was successfull ...."
								}
								else echo "Wrong Environment"
							
							break
						  default:
							echo "Invalid environment ERROR..."
							break
					}
					
					//echo "Start Deploying into Environment ${params.Environment}" 
					//sh "/softwares/jenkins/scripts/aem-crx-deploy.sh ${params.Environment} ${env.WORKSPACE} ${CRX_PACKAGE_NAME} ${env.AEM_PROD_TOKENS}"
					//echo "${params.Environment} deployment was successful."
					//echo "${params.Cluster} cluster deployment was successfull ...."
				}
				}
				}

				stage ('Publish build Artifacts') {
					steps{
					//buildInfo.name = "Released-${params.CR_NUMBER}"
					//server.publishBuildInfo buildInfo
					
					// Promote build
					/*
					def promotionConfig = [
						// Mandatory parameters
						'buildName'          : buildInfo.name,
						'buildNumber'        : buildInfo.number,
						'targetRepo'         : 'libs-release-local',
						'CRNumber'           : "${params.CR_NUMBER}"
					 
						// Optional parameters
						'comment'            : "Production release change request no:${params.CR_NUMBER}",
						'status'             : 'Released'
					]
					server.promote promotionConfig					
					*/
					echo "test line in publish build artifacts"
				}
				}
				
					
		 


	/*
		stage('Send email') {
			emailext attachLog: false,
			body: '${SCRIPT, template="groovy-html.template"}',
			compressLog: true, mimeType: 'text/html',
			recipientProviders: [culprits(), brokenBuildSuspects()],
			replyTo: '$DEFAULT_REPLYTO',
			subject: '$DEFAULT_SUBJECT',
			to:'sureshbabu'
			
			to: 'vshanmugavelu,smandadapu,ravindrard@virtusa.com,graja@virtusa.com,kgpraveen@virtusa.com,prathyushavp@virtusa.com,sarithad@virtusa.com,rmanoharan,shravankumar.b@sonata-software.com,gdinakar@virtusa.com,nareshbabuv@virtusa.com,ranjithgaddam@virtusa.com,sanghamittrap@virtusa.com,Shreyab@virtusa.com,rmoodapally,mohammedaahmed,rdevireddy,radhikan@virtusa.com,msambaraju,cc:AKapoor,cc:rwarrier,cc:sureshbabu'
		
		}*/	



	}
	}
